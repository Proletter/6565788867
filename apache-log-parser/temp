import re
from asyncore import read, write
import csv
from collections import Counter
import datetime
from datetime import timedelta
from pprint import pprint

global_data = {}

global_final_csv_data = []


# More than 20 requests to /login from one IP address, in the past 10 minutes
# IP address banned for the next 2 hours

def reader(filename):
    with open(filename) as logFile:
        log = logFile.read()
        ips_list = log.splitlines()
        populate_global_data(ips_list)

def populate_global_data(ip_list):
    for ip in ip_list:
        regexp = r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
        date = ip.split(" ")[3].split("[")[1]
        endpoint = ip.split(" ")[6]
        format = '%d/%b/%Y:%X'
        stripped_date = date[0:20]
        new_date = datetime.datetime.strptime(stripped_date, format)
        matched_ip = re.search(regexp, ip).group(0)
        if matched_ip in global_data.keys():
            global_data[matched_ip].append({'date':new_date, 'endpoint':endpoint})
        else:
            global_data[matched_ip] = [{'date':new_date, 'endpoint':endpoint}]
    pprint(global_data)
    # check_ips(global_data)

# 
# global_final_csv_data ={
#     ip = [
#         {
#             date:"/login"
#         },
#         {
#             date:"/gone"
#         }
#     ]
# }

def check_ips(global_data):
    for ip in global_data.keys():
        data_for_ip = global_data[ip]
        check_if_40_in_1mins(ip, data_for_ip)
        check_if_100_in_10mins(ip, data_for_ip)
        # check_if_20_in_10mins(ip, data_for_ip)
        # check_unban(ip, data_for_ip)

    write_csv(global_final_csv_data)

def count_data2(start_time, end_time, data_to_check):
    sub_items=[]
    for index in range(len(data_to_check)):
        for key in data_to_check[index]:
            i = data_to_check[index].keys()[0]
            if i >= start_time and i <= end_time:
                sub_items.append(i)
    # sub_items = [i for i in data_to_check if (i.keys[0] >= start_time and i.keys[0] <= end_time)]
    return len(sub_items)

def count_data(start_time, end_time, data_to_check):
    # [
    # {datetime.datetime(2018, 12, 31, 23, 55): '/gag/4558218'},
    # {datetime.datetime(2018, 12, 31, 23, 55): '/gag/4558218'}
    # ]
    temp = []
    for data in data_to_check:
        if data["date"] >= start_time and data["date"] <= end_time:
            temp.append(data["date"])
    return len(temp)




def check_if_40_in_1mins(ip, data_for_ip):
    for index in range(len(data_for_ip)):
        for key in data_for_ip[index]:
            time = data_for_ip[index].keys()[0]
            format = '%d/%b/%Y:%X'
            end_time = time + timedelta(minutes=1)
            count_record = count_data(time, end_time, data_for_ip)
            if count_record >= 40:
                # log it to central csv
                global_final_csv_data.append(
                        {"timestamp": end_time,
                        "action": "BAN for 10 minutes",
                        "ipaddress": ip
                        }
                    )

                break
            else:
                continue

def check_if_100_in_10mins(ip, data_for_ip):
     for index in range(len(data_for_ip)):
        for key in data_for_ip[index]:
            time = data_for_ip[index].keys()[0]
            end_time = time + timedelta(minutes=11)
            count_record = count_data(time, end_time, data_for_ip)
            if count_record >= 100:
                # log it to central csv
                global_final_csv_data.append(
                        {"timestamp": end_time,
                        "action": "BAN for 1 hour",
                        "ipaddress": ip
                        }
                    )
                break

# def check_if_20_in_10mins(ip, data_for_ip):
#     for time in data_for_ip:
#         format = '%d/%b/%Y:%X'
#         end_time = time + timedelta(minutes=10)
#         count_record = count_data(time, end_time, data_for_ip)
#         if count_record >= 20:
#             # log it to central csv
#             global_final_csv_data.append(
#                     {"timestamp": end_time,
#                     "action": "BAN for 1 hour",
#                     "ipaddress": ip
#                     }
#                 )
#             break

def check_unban(ip, data_for_ip):
    for index in range(len(data_for_ip)):
        for key in data_for_ip[index]:
            time = data_for_ip[index].keys()[0]
            end_time = time + timedelta(minutes=10)
            count_record = count_data(time, end_time, data_for_ip)
            if not (count_record >= 20 and count_record >= 40 and count_record >= 100):
                # log it to central csv
                global_final_csv_data.append(
                        {"timestamp": end_time,
                        "action": "UNBAN",
                        "ipaddress": ip
                        }
                    )
                break
 

# write list to csv with headers 
def write_csv(list_to_write, filename = 'output.csv'):
    with open(filename, 'w') as csvfile:
        fieldnames = ['timestamp', 'action', 'ipaddress']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(list_to_write)


if __name__ == '__main__':
    reader("accesss.log")
